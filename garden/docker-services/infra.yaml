networks:
  eden:
    driver: bridge
    name: eden
    ipam:
      config:
        - subnet: 172.21.0.0/16

services:
  asusrouter:
    container_name: asusrouter
    build:
      context: ../docker-asusrouter
      dockerfile: Dockerfile
    extends:
      file: ../docker-common/base.yaml
      service: generic
    secrets:
      - router_pw
    environment:
      ROUTER_HOST: ${router_host}
      ROUTER_USER: ${router_user}
      ROUTER_PW_FILE: /run/secrets/router_pw
    volumes:
      - ${host_data_config_path}/asusrouter:/app/scripts

  # for dozzle log errors in caddy, it's expected. See: https://github.com/amir20/dozzle/issues/2844
  caddy:
    container_name: based
    build:
      context: ../docker-caddy
      dockerfile: Dockerfile
    extends:
      file: ../docker-common/base.yaml
      service: generic
    environment:
      CADDY_INGRESS_NETWORKS: eden
    ports:
      - 80:80
      - 443:443
      - 6432:6432 #postgres container
      - 50777:50777 #qbittorrent container
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${host_data_config_path}:/data
      - ${host_data_config_path}:/config
    labels:
      com.centurylinklabs.watchtower.enable: false
      caddy_0: ${private_protocol}based.${private_domain}
      caddy_0.reverse_proxy: ${private_ip}:5000 #built-in DSM portal outside of docker
      caddy_1: ${public_protocol}based.${public_domain}
      caddy_1.reverse_proxy: ${private_ip}:5000 #built-in DSM portal outside of docker
      caddy_2: (tinyauth_forwarder)
      caddy_2.forward_auth: tinyauth:3000
      caddy_2.forward_auth.uri: /api/auth/caddy
      caddy_3.auto_https: disable_redirects
      #caddy_4.debug: '' #enable debugging

  tinyauth:
    container_name: auth
    image: ghcr.io/steveiliop56/tinyauth:latest
    extends:
      file: ../docker-common/base.yaml
      service: genericReadOnlyAsContainerUserNoCap
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    secrets:
      - github_client_secret
      - tinyauth_cookie_secret
    environment:
      DISABLE_CONTINUE: true
      APP_URL: ${public_protocol}${public_auth_domain}
      SECRET_FILE: /run/secrets/tinyauth_cookie_secret #used to encrypt the cookies, content has to be 32 characters
      OAUTH_WHITELIST: ${github_users_csv}
      GITHUB_CLIENT_ID: ${github_client_id}
      GITHUB_CLIENT_SECRET_FILE: /run/secrets/github_client_secret
      LOG_LEVEL: 1 #0 for debug, 1 for info
    labels:
      caddy_0: ${public_protocol}${public_auth_domain}
      caddy_0.reverse_proxy: "{{upstreams 3000}}"

  cloudflare-ddns-public:
    container_name: cloudflare-ddns-public
    image: favonia/cloudflare-ddns:latest
    extends:
      file: ../docker-common/base.yaml
      service: genericReadOnlyAsContainerUserNoCap
    secrets:
      - cloudflare_api_token
    environment:
      CLOUDFLARE_API_TOKEN_FILE: /run/secrets/cloudflare_api_token
      DOMAINS: "*.${public_domain},${public_auth_domain}"
      IP6_PROVIDER: none

  cloudflare-ddns-private:
    container_name: cloudflare-ddns-private
    image: favonia/cloudflare-ddns:latest
    extends:
      file: ../docker-common/base.yaml
      service: genericOnHostReadOnlyAsContainerUserNoCap
    secrets:
      - cloudflare_api_token
    environment:
      CLOUDFLARE_API_TOKEN_FILE: /run/secrets/cloudflare_api_token
      DOMAINS: "*.${private_domain}"
      IP4_PROVIDER: local
      IP6_PROVIDER: none

  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    extends:
      file: ../docker-common/base.yaml
      service: privateReadOnlyAsContainerUserNoCap
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      caddy_0: ${private_protocol}dozzle.${private_domain}
      caddy_0.reverse_proxy: "{{upstreams 8080}}"
      caddy_0.import: tinyauth_forwarder *

  watchtower:
    container_name: watchtower
    image: ghcr.io/nicholas-fedor/watchtower:latest
    extends:
      file: ../docker-common/base.yaml
      service: genericReadOnlyAsContainerUserNoCap
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_INCLUDE_RESTARTING: true
      WATCHTOWER_INCLUDE_STOPPED: true
      WATCHTOWER_REVIVE_STOPPED: true
      #WATCHTOWER_DEBUG: true
      #WATCHTOWER_RUN_ONCE: true # run once and exit
      WATCHTOWER_SCHEDULE: 0 */15 * * * * # every 15 minutes
      WATCHTOWER_TIMEOUT: 77s # 77 seconds
