services:
  code-server-dotnet:
    container_name: code
    image: ptr727/vscode-server-dotnetcore:latest
    extends:
      file: ../docker-common/base.yaml
      service: privateAsEnvironmentUser
    environment:
      DEFAULT_WORKSPACE: /config/workspace
    volumes:
      - ${host_data_config_path}/codeserver:/config
    labels:
      caddy_0: ${private_protocol}code.${private_domain}
      caddy_0.reverse_proxy: "{{upstreams 8443}}"
      caddy_0.import: tinyauth_forwarder *
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    container_name: postgres
    image: postgres:latest
    extends:
      file: ../docker-common/base.yaml
      service: genericAsContainerUser #accesses /var/run/postgresql
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD_FILE: /run/secrets/interface_pw
      POSTGRES_DB: nasi
      PGPORT: 6432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d nasi -U admin"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ${host_data_config_path}/postgres/data:/var/lib/postgresql/data
      - ${host_data_config_path}/postgres/scripts:/docker-entrypoint-initdb.d/
      - /etc/passwd:/etc/passwd:ro # see https://github.com/docker-library/docs/blob/master/postgres/README.md#arbitrary---user-notes
    secrets:
      - interface_pw
    labels:
      caddy_0.layer4.:6432:
      caddy_0.layer4.:6432.@a: "remote_ip ${private_ip_range}"
      caddy_0.layer4.:6432.route: "@a"
      caddy_0.layer4.:6432.route.proxy: "{{ upstreams 6432 }}"

  coredns:
    container_name: coredns
    image: coredns/coredns:latest
    extends:
      file: ../docker-common/base.yaml
      service: genericAsContainerUser
    volumes:
      - ${host_data_config_path}/coredns/:/coredns-config/
    command: -conf coredns-config/Corefile
    ports:
      - 53:53/tcp
      - 53:53/udp
      - 5533:53/udp

  ibm-mq:
    container_name: ibmmq
    image: icr.io/ibm-messaging/mq:latest
    extends:
      file: ../docker-common/base.yaml
      service: generic
    user: ${uid}
    ports:
      - 9443:9443 # Expose it directly because we cannot disable the HTTPS endpoint in the container easily
    group_add:
      - ${gid} # https://github.com/ibm-messaging/mq-container/issues/601
      - "65534" # https://github.com/ibm-messaging/mq-container/issues/510#issuecomment-1313860012
    environment:
      - LICENSE=accept
      - MQ_QMGR_NAME=QM1
      - MQ_ADMIN_PASSWORD=admin
    volumes: # https://www.ibm.com/docs/en/ibm-mq/9.4.x?topic=reference-mq-advanced-container-image#container-image-ref__file-system-mount-points__title__1
      - ../docker-ibmmq/configure.mqsc:/etc/mqm/configure.mqsc
      - ../docker-ibmmq/mykey:/etc/mqm/pki/keys/mykey
      - ${host_data_config_path}/ibmmq/:/mnt/mqm
    labels:
      caddy_0: ${private_protocol}ibmmq.${private_domain} # https://github.com/ibm-messaging/mq-container/issues/443
      caddy_0.reverse_proxy: "{{upstreams 9443}}"
      caddy_0.import: tinyauth_forwarder *
      caddy_1.layer4.:1414:
      caddy_1.layer4.:1414.@a: "remote_ip ${private_ip_range}"
      caddy_1.layer4.:1414.route: "@a"
      caddy_1.layer4.:1414.route.proxy: "{{ upstreams 1414 }}"
